@page "/medicos"
@using MediReserva.Models
@using MediReserva.Pages.Modals
@inject IMedicoService MedicoService
@inject IDialogService DialogService
@inject NavigationManager Navigation


<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">
    <MudMessageBox @ref="_messageBox" Title="Confirmación" CancelText="Cancelar">
    <MessageContent>
        ¿Está seguro que desea eliminar este médico? Esta acción no se puede deshacer.
    </MessageContent>
    <YesButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">
            Eliminar
        </MudButton>
    </YesButton>
</MudMessageBox>
    <MudText Typo="Typo.h5" Class="mb-4">Listado de Médicos</MudText>

    <MudGrid Class="mb-4">
        <MudItem xs="6">
            <MudTextField @bind-Value="_searchString"
                          Placeholder="Buscar..."
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          Immediate="true"
                          Margin="Margin.Dense"
                          FullWidth="true" />
        </MudItem>
        <MudItem xs="6" Class="d-flex justify-end">
            <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="@CrearMedico">
                Crear Médico
            </MudButton>
        </MudItem>
    </MudGrid>

    @if (_isLoading)
    {
        <div style="display: flex; justify-content: center; align-items: center; height: 60vh;">
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" />
        </div>
    }
    else if (_medicos == null || !_medicos.Any())
    {
        <MudText>No hay médicos disponibles.</MudText>
    }
    else
    {
        <MudTable Items="_medicos" Filter="TableFilter" Hover="true" Bordered="true" Striped="true">
            <HeaderContent>
                <MudTh>Nombre</MudTh>
                <MudTh>Email</MudTh>
                <MudTh>Teléfono</MudTh>
                <MudTh>Consultorio</MudTh>
                <MudTh>Acciones</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Nombre</MudTd>
                <MudTd>@context.Email</MudTd>
                <MudTd>@context.Telefono</MudTd>
                <MudTd>@context.Consultorio</MudTd>
                <MudTd>
                    <MudButton Color="Color.Primary"
                               Variant="Variant.Outlined"
                               Size="Size.Small"
                               OnClick="@(() => EditarMedico(context))">
                        Editar
                    </MudButton>
                    <MudButton Color="Color.Error"
                               Variant="Variant.Outlined"
                               Size="Size.Small"
                               Class="ml-2"
                               OnClick="@(() => EliminarMedico(context))">
                        Eliminar
                    </MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
    }

</MudContainer>

@code {
    private List<Medico>? _medicos;
    private string _searchString = "";

    private IEnumerable<Medico> _filteredMedicos => _medicos?.Where(TableFilter) ?? Enumerable.Empty<Medico>();

    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        _medicos = await MedicoService.GetAllAsync();
        _isLoading = false;
        StateHasChanged();
    }

    private bool TableFilter(Medico medico)
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return (medico.Nombre?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            || (medico.Email?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            || (medico.Telefono?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false)
            || (medico.Consultorio?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ?? false);
    }

    private async Task CrearMedico()
    {
        var parameters = new DialogParameters
            {
                ["MedicoParametro"] = new Medico()
            };

        var options = new DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true
            };

        var dialog = await DialogService.ShowAsync<MedicoModal>("Crear Médico", parameters, options);

        if (dialog is not null)
        {
            var result = await dialog.Result;
            if (result is { Canceled: false, Data: Medico medicoCreado })
            {
                _medicos?.Add(medicoCreado);
            }
        }
    }

    private async Task EditarMedico(Medico medico)
    {
        var parameters = new DialogParameters
            {
                ["MedicoParametro"] = medico
            };

        var options = new DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true
            };

        var dialog = await DialogService.ShowAsync<MedicoModal>("Editar Médico", parameters, options);

        if (dialog is not null)
        {
            var result = await dialog.Result;
            if (result is { Canceled: false, Data: Medico medicoEditado })
            {
                var index = _medicos?.FindIndex(m => m.Id == medicoEditado.Id);
                if (index.HasValue && index.Value != -1)
                    _medicos![index.Value] = medicoEditado;
            }
        }
    }

    private MudMessageBox? _messageBox;

    private async Task EliminarMedico(Medico medico)
    {
        bool? result = await _messageBox!.ShowAsync();

        if (result == true)
        {
            try
            {
                await MedicoService.DeleteAsync(medico.Id);
                Snackbar.Add("Médico eliminado con éxito", Severity.Success);
                Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error al eliminar el médico: {ex.Message}", Severity.Error);
            }
        }
    }



}
