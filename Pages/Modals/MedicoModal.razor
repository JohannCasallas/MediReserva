@using System.ComponentModel.DataAnnotations
@using MediReserva.Models
@using Microsoft.AspNetCore.Components.Forms
@using MudBlazor
@inject IEspecialidadService EspecialidadService
@inject IMedicoService MedicoService
@inject ISnackbar Snackbar

<MudDialog>
    <DialogContent>
        <EditForm Model="_medico" OnValidSubmit="Guardar" OnInvalidSubmit="OnInvalidSubmit">
            @* <DataAnnotationsValidator /> *@
            <ValidationSummary />

            <MudStack Spacing="3">
                <MudTextField Label="Nombre" @bind-Value="_medico.Nombre" For="@(() => _medico.Nombre)" Required="true" MaxLength="100" />
                <MudTextField Label="Email" @bind-Value="_medico.Email" For="@(() => _medico.Email)" MaxLength="100" />
                <MudTextField Label="Teléfono" @bind-Value="_medico.Telefono" For="@(() => _medico.Telefono)" MaxLength="15" />
                <MudSelect T="string"
                           Label="Consultorio"
                           @bind-Value="_medico.Consultorio"
                           For="@(() => _medico.Consultorio)"
                           Required="true"
                           Clearable="false">
                    @foreach (var c in Consultorios)
                    {
                        <MudSelectItem Value="@c">@c</MudSelectItem>
                    }
                </MudSelect>


                <MudSelect T="int" Label="Especialidad" @bind-Value="_medico.EspecialidadId" For="@(() => _medico.EspecialidadId)" Required="true" Clearable="true">
                    <MudSelectItem Value="-1">-- Seleccione una especialidad --</MudSelectItem>
                    @foreach (var especialidad in Especialidades)
                    {
                        <MudSelectItem Value="@especialidad.Id">@especialidad.Nombre</MudSelectItem>
                    }
                </MudSelect>
            </MudStack>
        </EditForm>
    </DialogContent>

    <DialogActions>
        <MudButton Color="Color.Primary" Disabled="@(!_isValid)" OnClick="Guardar">
            Guardar
        </MudButton>
        <MudButton Color="Color.Secondary" OnClick="Cancelar">
            Cancelar
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    IDialogReference MudDialog { get; set; } = default!;

    [Parameter]
    public Medico MedicoParametro { get; set; } = new();

    private Medico _medico = new();
    private List<Especialidad> Especialidades = new();
    private bool _isValid = false;

    protected override async Task OnInitializedAsync()
    {
        _medico = new Medico
        {
            Id = MedicoParametro.Id,
            Nombre = MedicoParametro.Nombre,
            Email = MedicoParametro.Email,
            Telefono = MedicoParametro.Telefono,
            Consultorio = MedicoParametro.Consultorio,
            EspecialidadId = MedicoParametro.EspecialidadId
        };

        Especialidades = await EspecialidadService.GetAllAsync();
        ValidateForm();
    }

    private List<string> Consultorios = new()
    {
        "105E", "103C", "104D", "102B", "101A"
    };


    private void ValidateForm()
    {
        var context = new ValidationContext(_medico);
        var results = new List<ValidationResult>();
        _isValid = Validator.TryValidateObject(_medico, context, results, true);
    }

    private void OnInvalidSubmit()
    {
        _isValid = false;
    }

    private async Task Guardar()
    {
        ValidateForm();
        if (!_isValid)
            return;

        if (_medico.Id == 0)
            await MedicoService.AddAsync(_medico);
        else
            await MedicoService.UpdateAsync(_medico);

        Snackbar.Add("Médico guardado con éxito", Severity.Success);
        MudDialog?.Close(DialogResult.Ok(_medico));
    }

    private void Cancelar()
    {
        MudDialog?.Close(DialogResult.Cancel());
    }
}
